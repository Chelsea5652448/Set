class Set:
    def __init__(self,kaart=['red','oval','empty',1]):
        self.kleur=kaart[0]
        self.vorm=kaart[1]
        self.inhoud=kaart[2]
        self.hoeveelheid=kaart[3]

                                                                     #om te controleren of kleur,vorm,inhoud,hoeveelheid hetzelfde zijn,
                                                                     #kunnen we respectievelijk nu <,<=,>,>= gebruiken.
    def __lt__(self,other):
        return self.kleur==other.kleur
    
    def __le__(self,other):
        return self.vorm==other.vorm
    
    def __gt__(self,other):
        return self.inhoud==other.inhoud
    
    def __ge__(self,other):
        return self.hoeveelheid==other.hoeveelheid
def check_set(card1,card2,card3):
    if type(card1)==list or type(card2)==list or type(card3)==list:
        print('Je moet de klassen nog aanpassen.')
        if type(card1)==list():
            card1=Set(card1)
        if type(card2)==list:
            card2=Set(card2)
        if type(card3)==list:
            card3=Set(card3)
    if (not card1<=card2 and card2<=card3) or (not card3<=card2 and card1<=card2) or (not card1<=card2 and card1<=card3):
        return False
    elif (not card1<card2 and card2<card3) or (not card3<card2 and card1<card2) or (not card1<card2 and card1<card3):
        return False
    elif (not card1>=card2 and card2>=card3) or (not card3>=card2 and card1>=card2) or (not card1>=card2 and card1>=card3):
        return False
    elif (not card1>card2 and card2>card3) or (not card3>card2 and card1>card2) or (not card1>card2 and card1>card3):
        return False
    else:
        return True
    
import random
   #een vaste seed voor makkelijker debuggen Deze later verwijderen!!!!!
alle_kaarten=[]   #wordt de lijst met alle 81 kaarten 
kleur=['green', 'purple', 'red']
vorm=['diamond','oval', 'squiggle']
inhoud=['empty', 'shaded','filled']
hoeveelheid=['1','2','3']
kaart=[]   #wordt een lijst met telkens 1 kaart erin 
for i in kleur:
    for j in vorm:
        for k in inhoud:
            for l in hoeveelheid:
                kaart=[i,j,k,l]
                alle_kaarten.append((kaart))
random.shuffle(alle_kaarten)   #zet de kaarten in een random volgorde in de lijst, is vergelijkbaar met schudden van een stapel kaartenprint(check_set(Set(['green','diamond','empty','2']),Set(['red','diamond','empty','1']),Set(['red','oval','empty','2'])))
kaarten_op_tafel=[]
Sets=[]
for b in range(12):   #een loop waarin twaalf keer de laatste kaart van de lijst met alle kaarten wordt toegevoegd aan een lijst met kaarten die op tafel liggen en waarbij deze kaart verwijdert wordt uit de lijst met alle kaarten
    kaarten_op_tafel.append(alle_kaarten[-1])
    alle_kaarten.pop()
    bovenste_kaart=alle_kaarten[-1]
    k=''.join(bovenste_kaart)
#code welk alle mogelijke sets vergelijkt en aangeeft welke sets een set zijn.
def vind_alle_sets(kaarten_op_tafel):    
    for i in range(len(kaarten_op_tafel)):
        for j in range(i,len(kaarten_op_tafel)):
            for k in range(j,len(kaarten_op_tafel)):
                if i==j or j==k or i==k:
                    pass
                else:
                    if check_set(Set(kaarten_op_tafel[i]),Set(kaarten_op_tafel[j]),Set(kaarten_op_tafel[k]))==True:
                        Sets.append([i,j,k])
    #als er geen set mogelijk is en alle sets dus leeg blijven is er sprake van een capset.
    print(kaarten_op_tafel)
    if Sets==[]:
        return('Dit is een capset')
    else: 
        for i in range(len(Sets)):
            for j in range(len(Sets[i])):
                Sets[i][j]+=1
        return(Sets)
def vind_willekeurige_set(kaarten_op_tafel)  :
    Sets=vind_alle_sets(kaarten_op_tafel)
    if Sets!='Dit is een capset':
        willekeurige_set=random.choice(Sets)
        print('Een willekeurige set is',willekeurige_set)

while len(alle_kaarten)>=3:        
    print(kaarten_op_tafel)
    #De speler moet nu een gevonden set invoeren zodat het algoritme kan checken of met klopt.
    #De speler voert de drie nummers in van de kaarten waarvan de speler denkt dat het een set is.
    #De enige manier van invoeren van een mogelijke set is als volgt: 1,2,3 
    #Met op de plaatsen 1 2 en 3 willekeurig de cijfer van de 3 kaarten die de speler gekozen heeft.
    invoer_speler = input("Vul hier je gevonden set in (als nummers van de kaarten met komma's ertussen zonder spaties'):")
    invoer_speler_list= invoer_speler.split(",")
    mogelijke_set=[]
    for i in range(len(invoer_speler_list)):
        mogelijke_set.append(int(invoer_speler_list[i]))
    lijst_mogelijke_set=[]
    for j in mogelijke_set:
        lijst_mogelijke_set.append(kaarten_op_tafel[j-1])
    
    #print(check_set(Set(lijst_mogelijke_set[0]), Set(lijst_mogelijke_set[1]), Set(lijst_mogelijke_set[2])))
    
    if check_set(Set(lijst_mogelijke_set[0]), Set(lijst_mogelijke_set[1]), Set(lijst_mogelijke_set[2])) == True:
        print("Je hebt een set gevonden!")
        #Verwijder de kaarten uit de lijst met kaarten die op tafel liggen.
        for j in mogelijke_set:
            kaarten_op_tafel.pop(j-1)
        #Voeg 3 nieuwe kaarten toe aan de lijst met kaarten op tafel.
        for b in range(3):
            kaarten_op_tafel.append(alle_kaarten[-1])
            alle_kaarten.pop()
            
    print(kaarten_op_tafel)
    
